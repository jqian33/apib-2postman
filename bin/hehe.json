{
    "info": {
        "name": "Metasys API",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{access_token}}",
                "type": "string"
            }
        ]
    },
    "item": [
        {
            "name": "Authentication",
            "description": "This section contains authentication-related methods to acquire and use an access token (JWT format) with\nany and all of the micro-services.  The access token contains the standard JWT claims, plus several single-value\nclaims.  Authorization-related claims are retrieved from the `userinfo` endpoint.  The expiration of the access\ntoken is based on the Metasys user profile.  The expiration of the refresh token is currently set to 5 hours, which is\nthe maximum length of the Metasys user session (300 minutes) when not \"Never Terminate\".  The refresh token has a\nsliding expiration and it is allowed multiple uses and is advanced as it is reused.  The API and the parameters are\ndictated by the 3rd party component IdentityServer 3, which is an open-source implementation of OAuth2 and OpenId Connect.",
            "item": [
                {
                    "name": "Login and Session Extension",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "connect",
                                "token"
                            ],
                            "query": [
                            ],
                            "variable": [
                            ]
                        },
                        "description": "See the two request/response examples in the sidebar. The first shows an example of logging in and retrieving an `access_token`. \nThe second shows an example of using the refresh token to extend a session and get a new `access_token`.",
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "client_id=metasys_ui&client_secret=secret&grant_type=password&scope=metasys_api+openid+offline_access+profile&username=username&password=password\n"
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"access_token\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The access token which must be included in an Authorization header on all calls requiring authentication.\"",
                            "    },",
                            "    \"expires_in\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"Seconds to Expiration\"",
                            "    },",
                            "    \"token_type\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"Indicates the type of token. This will always be *Bearer*\"",
                            "    },",
                            "    \"refresh_token\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The refresh token is used to extend a session. A refresh token is only returned if `offline_access` is included in `scope` when making requests of `/connect/token`.\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"access_token\",",
                            "    \"expires_in\",",
                            "    \"token_type\",",
                            "    \"refresh_token\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Request a User Profile",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "connect",
                                "userinfo"
                            ],
                            "query": [
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Receives the logged in user's profile information",
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"UserId\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"User Id\"",
                            "    },",
                            "    \"UserName\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"User Name\"",
                            "    },",
                            "    \"Culture\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"Language - Locale Code\"",
                            "    },",
                            "    \"IsAdministrator\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"Boolean Flag\"",
                            "    },",
                            "    \"CategoryPermissions\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"JSON-Formatted Serialized List of CategoryPermissions\"",
                            "    },",
                            "    \"SystemPermissions\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"JSON-Formatted Serialized SystemPermissions\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"UserId\",",
                            "    \"UserName\",",
                            "    \"Culture\",",
                            "    \"IsAdministrator\",",
                            "    \"CategoryPermissions\",",
                            "    \"SystemPermissions\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Audits",
            "description": "This section contains information about audits as used within the Metasys API",
            "item": [
                {
                    "name": "Get Audits",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "audits",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "originApplications",
                                    "value": "{{audits_originApplications}}",
                                    "description": "Filter by comma-separated list of origin applications\n\n+ See /enumSets/578/members for possible values"
                                },
                                {
                                    "key": "classLevels",
                                    "value": "{{audits_classLevels}}",
                                    "description": "Filter by comma-separated list of class levels\n\n+ See /enumSets/568/members for possible values"
                                },
                                {
                                    "key": "actionTypes",
                                    "value": "{{audits_actionTypes}}",
                                    "description": "Filter by comma-separated list of the action types\n\n+ See /enumSets/577/members for possible values"
                                },
                                {
                                    "key": "startTime",
                                    "value": "{{audits_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest audit to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{audits_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest audit to return"
                                },
                                {
                                    "key": "excludeDiscarded",
                                    "value": "false",
                                    "description": "Determines whether discarded audits will be excluded from results. Default is `false` (discarded audits will not be excluded).\n\n+ Accepted Values: `true`,`false`"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "-creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `creationTime`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of audits. When using multiple filters, an AND evaluation is assumed.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the audit\"",
                            "          },",
                            "          \"creationTime\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The ISO-8601 encoded dateTime representing the creation time when this audit message was created\"",
                            "          },",
                            "          \"actionType\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The action performed that initiated the audit. See /enumSets/577/members for possible values\"",
                            "          },",
                            "          \"discarded\": {",
                            "            \"type\": \"boolean\",",
                            "            \"description\": \"Indicates if the audit has been discarded\"",
                            "          },",
                            "          \"status\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"Enumeration representing status. See /enumSets/516/members for possible values\"",
                            "          },",
                            "          \"preData\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"value\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The past or present value of the audit\"",
                            "              },",
                            "              \"type\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "              },",
                            "              \"unit\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "              },",
                            "              \"precision\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "              }",
                            "            },",
                            "            \"description\": \"Data value prior to the Audit\",",
                            "            \"required\": [",
                            "              \"value\",",
                            "              \"type\",",
                            "              \"unit\",",
                            "              \"precision\"",
                            "            ]",
                            "          },",
                            "          \"postData\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"value\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The past or present value of the audit\"",
                            "              },",
                            "              \"type\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "              },",
                            "              \"unit\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "              },",
                            "              \"precision\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "              }",
                            "            },",
                            "            \"description\": \"Data value after the Audit\",",
                            "            \"required\": [",
                            "              \"value\",",
                            "              \"type\",",
                            "              \"unit\",",
                            "              \"precision\"",
                            "            ]",
                            "          },",
                            "          \"parameters\": {",
                            "            \"type\": \"array\",",
                            "            \"items\": {",
                            "              \"type\": \"object\",",
                            "              \"properties\": {",
                            "                \"value\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The past or present value of the audit\"",
                            "                },",
                            "                \"type\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "                },",
                            "                \"unit\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "                },",
                            "                \"precision\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "                }",
                            "              },",
                            "              \"required\": [",
                            "                \"value\",",
                            "                \"type\",",
                            "                \"unit\",",
                            "                \"precision\"",
                            "              ]",
                            "            }",
                            "          },",
                            "          \"errorString\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The error that may have occurred during an audit\"",
                            "          },",
                            "          \"user\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The userName of the user that initiated the audit\"",
                            "          },",
                            "          \"signature\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"fullName\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The name of the person \\\"signing\\\"\"",
                            "              },",
                            "              \"reason\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The reason for signing\"",
                            "              }",
                            "            },",
                            "            \"description\": \"The user who created this audit\",",
                            "            \"required\": [",
                            "              \"fullName\",",
                            "              \"reason\"",
                            "            ]",
                            "          },",
                            "          \"object\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the object on which the activity was generated\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this audit\"",
                            "          },",
                            "          \"annotations\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"Link to annotations\"",
                            "          },",
                            "          \"legacy\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"fullyQualifiedItemReference\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The fully qualified item reference of the object that created this audit\"",
                            "              },",
                            "              \"itemName\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The short name of the object that created this audit\"",
                            "              },",
                            "              \"classLevel\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"Indicates the class level in which this audit belongs. See /enumSets/568/members for possible values\"",
                            "              },",
                            "              \"originApplication\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"Indicates the application that performed action that generated this audit. See /enumSets/578/members for possible values\"",
                            "              },",
                            "              \"description\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"Provides the description of the action that generated this audit. See /enumSets/580/members for possible values\"",
                            "              }",
                            "            },",
                            "            \"description\": \"Metasys specific data\",",
                            "            \"required\": [",
                            "              \"fullyQualifiedItemReference\",",
                            "              \"itemName\",",
                            "              \"classLevel\",",
                            "              \"originApplication\",",
                            "              \"description\"",
                            "            ]",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"creationTime\",",
                            "          \"actionType\",",
                            "          \"discarded\",",
                            "          \"status\",",
                            "          \"preData\",",
                            "          \"postData\",",
                            "          \"parameters\",",
                            "          \"errorString\",",
                            "          \"user\",",
                            "          \"signature\",",
                            "          \"object\",",
                            "          \"self\",",
                            "          \"annotations\",",
                            "          \"legacy\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of audits\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this audit collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('audits_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('audits_id', id);",
                            "            tests['Set audits_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set audits_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Audit",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "audits",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{audits_id}}",
                                    "description": "The identifier of the audit to retrieve"
                                }
                            ]
                        },
                        "description": "Retrieves the specified audit.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The identifier of the audit\"",
                            "    },",
                            "    \"creationTime\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The ISO-8601 encoded dateTime representing the creation time when this audit message was created\"",
                            "    },",
                            "    \"actionType\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The action performed that initiated the audit. See /enumSets/577/members for possible values\"",
                            "    },",
                            "    \"discarded\": {",
                            "      \"type\": \"boolean\",",
                            "      \"description\": \"Indicates if the audit has been discarded\"",
                            "    },",
                            "    \"status\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"Enumeration representing status. See /enumSets/516/members for possible values\"",
                            "    },",
                            "    \"preData\": {",
                            "      \"type\": \"object\",",
                            "      \"properties\": {",
                            "        \"value\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The past or present value of the audit\"",
                            "        },",
                            "        \"type\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "        },",
                            "        \"unit\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "        },",
                            "        \"precision\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "        }",
                            "      },",
                            "      \"description\": \"Data value prior to the Audit\",",
                            "      \"required\": [",
                            "        \"value\",",
                            "        \"type\",",
                            "        \"unit\",",
                            "        \"precision\"",
                            "      ]",
                            "    },",
                            "    \"postData\": {",
                            "      \"type\": \"object\",",
                            "      \"properties\": {",
                            "        \"value\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The past or present value of the audit\"",
                            "        },",
                            "        \"type\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "        },",
                            "        \"unit\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "        },",
                            "        \"precision\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "        }",
                            "      },",
                            "      \"description\": \"Data value after the Audit\",",
                            "      \"required\": [",
                            "        \"value\",",
                            "        \"type\",",
                            "        \"unit\",",
                            "        \"precision\"",
                            "      ]",
                            "    },",
                            "    \"parameters\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"value\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The past or present value of the audit\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "          },",
                            "          \"unit\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "          },",
                            "          \"precision\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"value\",",
                            "          \"type\",",
                            "          \"unit\",",
                            "          \"precision\"",
                            "        ]",
                            "      }",
                            "    },",
                            "    \"errorString\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The error that may have occurred during an audit\"",
                            "    },",
                            "    \"user\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The userName of the user that initiated the audit\"",
                            "    },",
                            "    \"signature\": {",
                            "      \"type\": \"object\",",
                            "      \"properties\": {",
                            "        \"fullName\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The name of the person \\\"signing\\\"\"",
                            "        },",
                            "        \"reason\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The reason for signing\"",
                            "        }",
                            "      },",
                            "      \"description\": \"The user who created this audit\",",
                            "      \"required\": [",
                            "        \"fullName\",",
                            "        \"reason\"",
                            "      ]",
                            "    },",
                            "    \"object\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the object on which the activity was generated\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this audit\"",
                            "    },",
                            "    \"annotations\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"Link to annotations\"",
                            "    },",
                            "    \"legacy\": {",
                            "      \"type\": \"object\",",
                            "      \"properties\": {",
                            "        \"fullyQualifiedItemReference\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The fully qualified item reference of the object that created this audit\"",
                            "        },",
                            "        \"itemName\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"The short name of the object that created this audit\"",
                            "        },",
                            "        \"classLevel\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"Indicates the class level in which this audit belongs. See /enumSets/568/members for possible values\"",
                            "        },",
                            "        \"originApplication\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"Indicates the application that performed action that generated this audit. See /enumSets/578/members for possible values\"",
                            "        },",
                            "        \"description\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"Provides the description of the action that generated this audit. See /enumSets/580/members for possible values\"",
                            "        }",
                            "      },",
                            "      \"description\": \"Metasys specific data\",",
                            "      \"required\": [",
                            "        \"fullyQualifiedItemReference\",",
                            "        \"itemName\",",
                            "        \"classLevel\",",
                            "        \"originApplication\",",
                            "        \"description\"",
                            "      ]",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"creationTime\",",
                            "    \"actionType\",",
                            "    \"discarded\",",
                            "    \"status\",",
                            "    \"preData\",",
                            "    \"postData\",",
                            "    \"parameters\",",
                            "    \"errorString\",",
                            "    \"user\",",
                            "    \"signature\",",
                            "    \"object\",",
                            "    \"self\",",
                            "    \"annotations\",",
                            "    \"legacy\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get Audit Annotations",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "audits",
                                ":id",
                                "annotations"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "-creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `creationTime`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{audits_id}}",
                                    "description": "The identifier of the audit to retrieve annotations for"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of audit annotations.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the audit annotation\"",
                            "          },",
                            "          \"creationTime\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The ISO-8601 encoded dateTime representing the creation time when this audit annotation\"",
                            "          },",
                            "          \"user\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The user name of the user that initiated the audit annotation\"",
                            "          },",
                            "          \"text\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The text of the audit annotation\"",
                            "          },",
                            "          \"signature\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"fullName\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The name of the person \\\"signing\\\"\"",
                            "              },",
                            "              \"reason\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The reason for signing\"",
                            "              }",
                            "            },",
                            "            \"description\": \"The user who created this audit annotation\",",
                            "            \"required\": [",
                            "              \"fullName\",",
                            "              \"reason\"",
                            "            ]",
                            "          },",
                            "          \"action\": {",
                            "            \"type\": \"string\",",
                            "            \"enum\": [",
                            "              \"'none'\",",
                            "              \"'acknowledged'\",",
                            "              \"'completed'\",",
                            "              \"'discarded'\",",
                            "              \"'snoozed'\"",
                            "            ],",
                            "            \"description\": \"The action on which the annotation was created. In case if the annotation was not created during an action, the default value will be \\\"none\\\"\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"creationTime\",",
                            "          \"user\",",
                            "          \"text\",",
                            "          \"signature\",",
                            "          \"action\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of audit annotations\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this audit annotation data set\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('audits_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('audits_id', id);",
                            "            tests['Set audits_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set audits_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Alarms",
            "description": "This section contains information about alarms as used within the Metasys API.",
            "item": [
                {
                    "name": "Get Alarms",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "alarms",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "startTime",
                                    "value": "{{alarms_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest alarm to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{alarms_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest alarm to return"
                                },
                                {
                                    "key": "priorityRange",
                                    "value": "{{alarms_priorityRange}}",
                                    "description": "The inclusive priority range, from 0 to 255, of the alarm"
                                },
                                {
                                    "key": "type",
                                    "value": "{{alarms_type}}",
                                    "description": "The type of the requested alarms\n\n+ See /enumSets/505/members for possible values"
                                },
                                {
                                    "key": "excludePending",
                                    "value": "false",
                                    "description": "The flag to exclude pending alarms"
                                },
                                {
                                    "key": "excludeAcknowledged",
                                    "value": "false",
                                    "description": "The flag to exclude acknowledged alarms"
                                },
                                {
                                    "key": "excludeDiscarded",
                                    "value": "false",
                                    "description": "The flag to exclude discarded alarms"
                                },
                                {
                                    "key": "attribute",
                                    "value": "{{alarms_attribute}}",
                                    "description": "The attribute of the requested alarms\n\n+ See /enumSets/509/members for possible values"
                                },
                                {
                                    "key": "category",
                                    "value": "{{alarms_category}}",
                                    "description": "The system category of the requested alarms\n\n+ See /enumSets/33/members for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `priority`, `creationTime`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of alarms.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"description\": \"The collection of alarms\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this alarm collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('alarms_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('alarms_id', id);",
                            "            tests['Set alarms_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set alarms_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'priority', 'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Alarm",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "alarms",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{alarms_id}}",
                                    "description": "The identifier of the alarm"
                                }
                            ]
                        },
                        "description": "Retrieves the specified alarm.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The identifier of the object\"",
                            "    },",
                            "    \"itemReference\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The fully qualified reference of the object\"",
                            "    },",
                            "    \"name\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The name of the object\"",
                            "    },",
                            "    \"message\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The alarm message\"",
                            "    },",
                            "    \"isAckRequired\": {",
                            "      \"type\": \"boolean\",",
                            "      \"description\": \"Indicates whether an acknowledgment is required on the alarm\"",
                            "    },",
                            "    \"type\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the enum member for the type of alarm\"",
                            "    },",
                            "    \"priority\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The priority of the alarm\"",
                            "    },",
                            "    \"creationTime\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The ISO-8601 encoded timestamp for when the alarm was detected\"",
                            "    },",
                            "    \"isAcknowledged\": {",
                            "      \"type\": \"boolean\",",
                            "      \"description\": \"Indicates whether the alarm has been acknowledged\"",
                            "    },",
                            "    \"isDiscarded\": {",
                            "      \"type\": \"boolean\",",
                            "      \"description\": \"Indicates whether the alarm has been discarded\"",
                            "    },",
                            "    \"category\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the authorization category of the object when the alarm was generated\"",
                            "    },",
                            "    \"object\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the object from which this alarm was generated\"",
                            "    },",
                            "    \"attribute\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the attribute for which this alarm was generated\"",
                            "    },",
                            "    \"annotations\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the annotations available on the alarm\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection of alarms\"",
                            "    },",
                            "    \"triggerValue\": {",
                            "      \"type\": \"object\",",
                            "      \"properties\": {",
                            "        \"value\": {",
                            "          \"type\": \"number\",",
                            "          \"description\": \"The value of the attribute of the object on which the alarm was triggered\"",
                            "        },",
                            "        \"units\": {",
                            "          \"type\": \"string\",",
                            "          \"description\": \"A link to the units of the object on which the alarm was triggered\"",
                            "        }",
                            "      },",
                            "      \"description\": \"The analog value of the attribute of the object on which the alarm was triggered\",",
                            "      \"required\": [",
                            "        \"value\",",
                            "        \"units\"",
                            "      ]",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"itemReference\",",
                            "    \"name\",",
                            "    \"message\",",
                            "    \"isAckRequired\",",
                            "    \"type\",",
                            "    \"priority\",",
                            "    \"creationTime\",",
                            "    \"isAcknowledged\",",
                            "    \"isDiscarded\",",
                            "    \"category\",",
                            "    \"object\",",
                            "    \"attribute\",",
                            "    \"annotations\",",
                            "    \"self\",",
                            "    \"triggerValue\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get Alarm Annotations",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "alarms",
                                ":id",
                                "annotations",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "startTime",
                                    "value": "{{alarms_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest annotation to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{alarms_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest annotation to return"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `creationTime`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{alarms_id}}",
                                    "description": "The identifier of the alarm"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of annotations available for the specified alarm.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"text\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The annotation text\"",
                            "          },",
                            "          \"user\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The user who annotated the alarm\"",
                            "          },",
                            "          \"creationTime\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The ISO-8601 encoded timestamp for when the annotation on the alarm was created\"",
                            "          },",
                            "          \"action\": {",
                            "            \"type\": \"string\",",
                            "            \"enum\": [",
                            "              \"'none'\",",
                            "              \"'acknowledged'\",",
                            "              \"'completed'\",",
                            "              \"'discarded'\",",
                            "              \"'snoozed'\"",
                            "            ],",
                            "            \"description\": \"The alarm action on which the annotation was created. In case if the annotation was not created during an alarm action, the default value will be \\\"none\\\"\"",
                            "          },",
                            "          \"alarm\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarm\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"text\",",
                            "          \"user\",",
                            "          \"creationTime\",",
                            "          \"action\",",
                            "          \"alarm\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of annotations for an alarm\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this alarm annotation collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('alarms_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('alarms_id', id);",
                            "            tests['Set alarms_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set alarms_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Enumerations",
            "description": "This section contains information about enumeration-related resources as used within the Metasys API.",
            "item": [
                {
                    "name": "Get Enum Sets",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "enumSets"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of all enumeration sets in the system.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"number\",",
                            "            \"description\": \"The identifier for the enum set\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description of the enum set\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the enum set\"",
                            "          },",
                            "          \"members\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the enum set members\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"description\",",
                            "          \"self\",",
                            "          \"members\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of enum sets\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this enum set collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('enumSets_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('enumSets_id', id);",
                            "            tests['Set enumSets_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set enumSets_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Enum Set",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "enumSets",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{enumSets_id}}",
                                    "description": "The identifier for the enum set"
                                }
                            ]
                        },
                        "description": "Retrieves the specified enumeration set.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The identifier for the enum set\"",
                            "    },",
                            "    \"description\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The description of the enum set\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the enum set\"",
                            "    },",
                            "    \"members\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the enum set members\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"description\",",
                            "    \"self\",",
                            "    \"members\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get Enum Members",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "enumSets",
                                ":id",
                                "members"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{enumSets_id}}",
                                    "description": "The identifier for the enum set"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of member values belonging to the specified enumeration set.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"number\",",
                            "            \"description\": \"The identifier for the enum member\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description of the enum member\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the enum set members\"",
                            "          },",
                            "          \"set\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the enum set\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"description\",",
                            "          \"self\",",
                            "          \"set\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of enum members\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this enum member collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('enumSets_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('enumSets_id', id);",
                            "            tests['Set enumSets_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set enumSets_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Enum Member",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "enumSets",
                                ":id",
                                "members",
                                ":memberId"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{enumSets_id}}",
                                    "description": "The identifier for the enum set"
                                },
                                {
                                    "key": "memberId",
                                    "value": "{{enumSets_memberId}}",
                                    "description": "The identifier for the enum member"
                                }
                            ]
                        },
                        "description": "Retrieves the specified enumeration member value.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The identifier for the enum member\"",
                            "    },",
                            "    \"description\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The description of the enum member\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the enum set members\"",
                            "    },",
                            "    \"set\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the enum set\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"description\",",
                            "    \"self\",",
                            "    \"set\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Equipment",
            "description": "This section contains information about equipment-related resources as used within the Metasys API.",
            "item": [
                {
                    "name": "Get Equipment Instances",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `type`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of equipment instances.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The full name of the equipment instance\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the equipment definition for this equipment instance\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this equipment instance\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces served by this equipment instance\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment served by this equipment instance\"",
                            "          },",
                            "          \"upstreamEquipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment that serves this equipment instance\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that host this equipment instance\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the point mappings defined by this equipment instance\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"upstreamEquipment\",",
                            "          \"networkDevices\",",
                            "          \"points\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment instances\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('equipment_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('equipment_id', id);",
                            "            tests['Set equipment_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set equipment_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'type'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Equipment Instance",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{equipment_id}}",
                                    "description": "The identifier of the instance of equipment"
                                }
                            ]
                        },
                        "description": "Retrieves the specified equipment instance.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The identifier of the object\"",
                            "    },",
                            "    \"itemReference\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The fully qualified reference of the object\"",
                            "    },",
                            "    \"name\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The full name of the equipment instance\"",
                            "    },",
                            "    \"type\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The name of the equipment definition for this equipment instance\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment instance\"",
                            "    },",
                            "    \"spaces\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the spaces served by this equipment instance\"",
                            "    },",
                            "    \"equipment\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the equipment served by this equipment instance\"",
                            "    },",
                            "    \"upstreamEquipment\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the equipment that serves this equipment instance\"",
                            "    },",
                            "    \"networkDevices\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network devices that host this equipment instance\"",
                            "    },",
                            "    \"points\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the point mappings defined by this equipment instance\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"itemReference\",",
                            "    \"name\",",
                            "    \"type\",",
                            "    \"self\",",
                            "    \"spaces\",",
                            "    \"equipment\",",
                            "    \"upstreamEquipment\",",
                            "    \"networkDevices\",",
                            "    \"points\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Spaces Served By An Equipment Instance",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment",
                                ":id",
                                "spaces"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{equipment_id}}",
                                    "description": "The identifier of the instance of equipment"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of spaces served by the specified equipment instance.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the space\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of space\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this space\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the space that contains this space\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces contained within this space\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances serving this space\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices serving this space\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"networkDevices\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of spaces\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this space collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('equipment_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('equipment_id', id);",
                            "            tests['Set equipment_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set equipment_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Equipment Served By An Equipment Instance",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment",
                                ":id",
                                "equipment"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `type`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{equipment_id}}",
                                    "description": "The identifier of the instance of equipment"
                                }
                            ]
                        },
                        "description": "Retrieves the equipment served by the specified equipment instance.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The full name of the equipment instance\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the equipment definition for this equipment instance\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this equipment instance\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces served by this equipment instance\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment served by this equipment instance\"",
                            "          },",
                            "          \"upstreamEquipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment that serves this equipment instance\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that host this equipment instance\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the point mappings defined by this equipment instance\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"upstreamEquipment\",",
                            "          \"networkDevices\",",
                            "          \"points\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment instances\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('equipment_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('equipment_id', id);",
                            "            tests['Set equipment_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set equipment_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'type'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Equipment that Serve An Equipment Instance",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment",
                                ":id",
                                "upstreamEquipment"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `type`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{equipment_id}}",
                                    "description": "The identifier of the instance of equipment"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of equipment that serve the specified equipment instance.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The full name of the equipment instance\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the equipment definition for this equipment instance\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this equipment instance\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces served by this equipment instance\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment served by this equipment instance\"",
                            "          },",
                            "          \"upstreamEquipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment that serves this equipment instance\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that host this equipment instance\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the point mappings defined by this equipment instance\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"upstreamEquipment\",",
                            "          \"networkDevices\",",
                            "          \"points\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment instances\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('equipment_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('equipment_id', id);",
                            "            tests['Set equipment_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set equipment_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'type'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Network Devices Hosting An Equipment Instance",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment",
                                ":id",
                                "networkDevices"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `categoryId`, `firmwareVersion`, `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{equipment_id}}",
                                    "description": "The identifier of the instance of equipment"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of network devices that host the specified equipment instance, along with the parents of those network devices. A network device is considered to host an equipment if the equipment defines points that map to an attribute of any object contained on the network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the network device\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of network device\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description for the network device\"",
                            "          },",
                            "          \"firmwareVersion\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The firmware version for the network device\"",
                            "          },",
                            "          \"category\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the authorization category for the network device\"",
                            "          },",
                            "          \"timeZone\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the time zone in which the device is located\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The link to the network device\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that is the parent of this network device\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that are children of this network device\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances hosted by this network device\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces that are served by this network device\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the objects contained within this network device\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this network device for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms available for this network device\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"description\",",
                            "          \"firmwareVersion\",",
                            "          \"category\",",
                            "          \"timeZone\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"networkDevices\",",
                            "          \"equipment\",",
                            "          \"spaces\",",
                            "          \"objects\",",
                            "          \"attributes\",",
                            "          \"alarms\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of network devices\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this network device collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('equipment_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('equipment_id', id);",
                            "            tests['Set equipment_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set equipment_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'categoryId', 'firmwareVersion', 'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Points Defined by An Equipment Instance",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "equipment",
                                ":id",
                                "points"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "shortName",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `category`,`equipmentName`, `isDisplayData`, `shortName`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{equipment_id}}",
                                    "description": "The identifier of the instance of equipment"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of points that are defined by the specified equipment instance. Each point contains a mapping to an attribute on an object.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"equipmentName\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the mapped equipment\"",
                            "          },",
                            "          \"shortName\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The short name for the equipment point\"",
                            "          },",
                            "          \"label\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The label for the equipment point\"",
                            "          },",
                            "          \"category\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The category for the equipment point\"",
                            "          },",
                            "          \"isDisplayData\": {",
                            "            \"type\": \"boolean\",",
                            "            \"description\": \"Whether the equipment point is marked as display data\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the mapped equipment\"",
                            "          },",
                            "          \"object\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the mapped object\"",
                            "          },",
                            "          \"attribute\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the mapped attribute\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"equipmentName\",",
                            "          \"shortName\",",
                            "          \"label\",",
                            "          \"category\",",
                            "          \"isDisplayData\",",
                            "          \"equipment\",",
                            "          \"object\",",
                            "          \"attribute\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment point mappings\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment point mapping collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('equipment_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('equipment_id', id);",
                            "            tests['Set equipment_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set equipment_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'category', 'equipmentName', 'isDisplayData', 'shortName'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Network Devices",
            "description": "This section contains information about network device-related resources as used within the Metasys API",
            "item": [
                {
                    "name": "Get Network Devices",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices"
                            ],
                            "query": [
                                {
                                    "key": "type",
                                    "value": "{{networkDevices_type}}",
                                    "description": "Type of network device to return\n\n+ See /networkDevices/availableTypes for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `categoryId`, `firmwareVersion`, `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of network devices.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the network device\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of network device\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description for the network device\"",
                            "          },",
                            "          \"firmwareVersion\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The firmware version for the network device\"",
                            "          },",
                            "          \"category\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the authorization category for the network device\"",
                            "          },",
                            "          \"timeZone\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the time zone in which the device is located\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The link to the network device\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that is the parent of this network device\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that are children of this network device\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances hosted by this network device\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces that are served by this network device\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the objects contained within this network device\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this network device for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms available for this network device\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"description\",",
                            "          \"firmwareVersion\",",
                            "          \"category\",",
                            "          \"timeZone\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"networkDevices\",",
                            "          \"equipment\",",
                            "          \"spaces\",",
                            "          \"objects\",",
                            "          \"attributes\",",
                            "          \"alarms\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of network devices\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this network device collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'categoryId', 'firmwareVersion', 'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Network Device Types",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                "availableTypes"
                            ],
                            "query": [
                                {
                                    "key": "type",
                                    "value": "{{networkDevices_type}}",
                                    "description": "Type of network device to return\n\n+ See /networkDevices/availableTypes for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `categoryId`, `firmwareVersion`, `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves the collection of all network device types.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"number\",",
                            "            \"description\": \"Identifier for the object type\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description of the object type\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the object type enum member\"",
                            "          },",
                            "          \"set\": {",
                            "            \"type\": \"string\",",
                            "            \"enum\": [",
                            "              \"/enumSets/508\"",
                            "            ],",
                            "            \"description\": \"A link to the object type enum set\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"description\",",
                            "          \"self\",",
                            "          \"set\"",
                            "        ]",
                            "      }",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this network device type collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Network Device",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves the specified network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The identifier of the object\"",
                            "    },",
                            "    \"itemReference\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The fully qualified reference of the object\"",
                            "    },",
                            "    \"name\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The name of the network device\"",
                            "    },",
                            "    \"type\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the type of network device\"",
                            "    },",
                            "    \"description\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The description for the network device\"",
                            "    },",
                            "    \"firmwareVersion\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The firmware version for the network device\"",
                            "    },",
                            "    \"category\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the authorization category for the network device\"",
                            "    },",
                            "    \"timeZone\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the time zone in which the device is located\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The link to the network device\"",
                            "    },",
                            "    \"parent\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network device that is the parent of this network device\"",
                            "    },",
                            "    \"networkDevices\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network devices that are children of this network device\"",
                            "    },",
                            "    \"equipment\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the equipment instances hosted by this network device\"",
                            "    },",
                            "    \"spaces\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the spaces that are served by this network device\"",
                            "    },",
                            "    \"objects\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the objects contained within this network device\"",
                            "    },",
                            "    \"attributes\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the attributes on this network device for which samples are available\"",
                            "    },",
                            "    \"alarms\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the alarms available for this network device\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"itemReference\",",
                            "    \"name\",",
                            "    \"type\",",
                            "    \"description\",",
                            "    \"firmwareVersion\",",
                            "    \"category\",",
                            "    \"timeZone\",",
                            "    \"self\",",
                            "    \"parent\",",
                            "    \"networkDevices\",",
                            "    \"equipment\",",
                            "    \"spaces\",",
                            "    \"objects\",",
                            "    \"attributes\",",
                            "    \"alarms\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Network Device Children",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "networkDevices"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `categoryId`, `firmwareVersion`, `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of network devices that are children of the specified network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the network device\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of network device\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description for the network device\"",
                            "          },",
                            "          \"firmwareVersion\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The firmware version for the network device\"",
                            "          },",
                            "          \"category\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the authorization category for the network device\"",
                            "          },",
                            "          \"timeZone\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the time zone in which the device is located\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The link to the network device\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that is the parent of this network device\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that are children of this network device\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances hosted by this network device\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces that are served by this network device\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the objects contained within this network device\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this network device for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms available for this network device\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"description\",",
                            "          \"firmwareVersion\",",
                            "          \"category\",",
                            "          \"timeZone\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"networkDevices\",",
                            "          \"equipment\",",
                            "          \"spaces\",",
                            "          \"objects\",",
                            "          \"attributes\",",
                            "          \"alarms\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of network devices\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this network device collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'categoryId', 'firmwareVersion', 'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Child Objects",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "objects"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of objects that are children of the specified network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the object\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of object\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this object\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the parent of this object\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the children of this object\"",
                            "          },",
                            "          \"networkDevice\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that contains this object\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to all equipment point mappings defined for this object\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this object for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms generated by this object\"",
                            "          },",
                            "          \"audits\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the audits generated for this object\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"objects\",",
                            "          \"networkDevice\",",
                            "          \"points\",",
                            "          \"attributes\",",
                            "          \"alarms\",",
                            "          \"audits\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of objects\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this object collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Equipment Hosted By A Network Device",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "equipment"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `type`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of equipment instances that are hosted by the specified network device or its children. A network device is considered to host an equipment if the equipment defines points that map to an attribute of any object contained on the network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The full name of the equipment instance\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the equipment definition for this equipment instance\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this equipment instance\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces served by this equipment instance\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment served by this equipment instance\"",
                            "          },",
                            "          \"upstreamEquipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment that serves this equipment instance\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that host this equipment instance\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the point mappings defined by this equipment instance\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"upstreamEquipment\",",
                            "          \"networkDevices\",",
                            "          \"points\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment instances\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'type'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Spaces Served by a Network Device",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "spaces"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of spaces served by the specified network device.\nA space is considered to be served by a network device if any equipment instance serving the space defines points that map to an attribute of any object contained on the network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the space\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of space\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this space\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the space that contains this space\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces contained within this space\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances serving this space\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices serving this space\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"networkDevices\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of spaces\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this space collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Network Device Attributes With Samples",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "attributes"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of attributes under the specified network device for which samples are available.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"samples\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the collection of network device value samples\"",
                            "          },",
                            "          \"attribute\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attribute on which the samples were taken\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"samples\",",
                            "          \"attribute\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of available samples\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Samples For A Network Device Attribute",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "attributes",
                                ":attributeId",
                                "samples"
                            ],
                            "query": [
                                {
                                    "key": "startTime",
                                    "value": "{{networkDevices_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest sample to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{networkDevices_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest sample to return"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "1000",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "timestamp",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `timestamp`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                },
                                {
                                    "key": "attributeId",
                                    "value": "{{networkDevices_attributeId}}",
                                    "description": "The identifier of the attribute for which to retrieve sample information\n\n+ See /networkDevices/{id}/attributes for possible values"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of samples for the specified network device attribute during a particular date and time range.\n\nNote that the parent endpoint `/networkDevices/{id}/attributes/{attributeId}` is not currently implemented.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"attribute\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the attribute for which the samples were generated\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection of network device value samples\"",
                            "    },",
                            "    \"networkDevice\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network device from which these samples were generated\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"attribute\",",
                            "    \"self\",",
                            "    \"networkDevice\",",
                            "    \"items\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'timestamp'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Alarms For A Network Device",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "networkDevices",
                                ":id",
                                "alarms"
                            ],
                            "query": [
                                {
                                    "key": "startTime",
                                    "value": "{{networkDevices_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest alarm to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{networkDevices_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest alarm to return"
                                },
                                {
                                    "key": "priorityRange",
                                    "value": "{{networkDevices_priorityRange}}",
                                    "description": "The inclusive priority range, from 0 to 255, of the alarm"
                                },
                                {
                                    "key": "type",
                                    "value": "{{networkDevices_type}}",
                                    "description": "The type of the requested alarms\n\n+ See /enumSets/505/members for possible values."
                                },
                                {
                                    "key": "excludePending",
                                    "value": "false",
                                    "description": "The flag to exclude pending alarms"
                                },
                                {
                                    "key": "excludeAcknowledged",
                                    "value": "false",
                                    "description": "The flag to exclude acknowledged alarms"
                                },
                                {
                                    "key": "excludeDiscarded",
                                    "value": "false",
                                    "description": "The flag to exclude discarded alarms"
                                },
                                {
                                    "key": "attribute",
                                    "value": "{{networkDevices_attribute}}",
                                    "description": "The attribute of the requested alarms\n\n+ See /enumSets/509/members for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `priority`, `creationTime`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{networkDevices_id}}",
                                    "description": "The identifier of the network device"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of alarms for the specified network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"description\": \"The collection of alarms\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection of network device alarms\"",
                            "    },",
                            "    \"networkDevice\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network device from which this alarm was generated\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\",",
                            "    \"networkDevice\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('networkDevices_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('networkDevices_id', id);",
                            "            tests['Set networkDevices_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set networkDevices_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'priority', 'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Objects",
            "description": "This section contains information about object-related resources as used within the Metasys API.",
            "item": [
                {
                    "name": "Get Objects",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects"
                            ],
                            "query": [
                                {
                                    "key": "type",
                                    "value": "{{objects_type}}",
                                    "description": "Type of object to return\n\n+ See /enumSets/508/members for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of objects. Note that this endpoint requires the `type` parameter to be supplied; returning a list of all objects in the system is not currently supported.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the object\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of object\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this object\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the parent of this object\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the children of this object\"",
                            "          },",
                            "          \"networkDevice\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that contains this object\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to all equipment point mappings defined for this object\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this object for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms generated by this object\"",
                            "          },",
                            "          \"audits\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the audits generated for this object\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"objects\",",
                            "          \"networkDevice\",",
                            "          \"points\",",
                            "          \"attributes\",",
                            "          \"alarms\",",
                            "          \"audits\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of objects\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this object collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('objects_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('objects_id', id);",
                            "            tests['Set objects_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set objects_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Object",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                }
                            ]
                        },
                        "description": "Retrieves the specified object.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The identifier of the object\"",
                            "    },",
                            "    \"itemReference\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The fully qualified reference of the object\"",
                            "    },",
                            "    \"name\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The name of the object\"",
                            "    },",
                            "    \"type\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the type of object\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this object\"",
                            "    },",
                            "    \"parent\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the parent of this object\"",
                            "    },",
                            "    \"objects\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the children of this object\"",
                            "    },",
                            "    \"networkDevice\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network device that contains this object\"",
                            "    },",
                            "    \"points\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to all equipment point mappings defined for this object\"",
                            "    },",
                            "    \"attributes\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the attributes on this object for which samples are available\"",
                            "    },",
                            "    \"alarms\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the alarms generated by this object\"",
                            "    },",
                            "    \"audits\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the audits generated for this object\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"itemReference\",",
                            "    \"name\",",
                            "    \"type\",",
                            "    \"self\",",
                            "    \"parent\",",
                            "    \"objects\",",
                            "    \"networkDevice\",",
                            "    \"points\",",
                            "    \"attributes\",",
                            "    \"alarms\",",
                            "    \"audits\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Object Children",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id",
                                "objects"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                }
                            ]
                        },
                        "description": "Retrieves the children (recursively) of the specified object.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the object\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of object\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this object\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the parent of this object\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the children of this object\"",
                            "          },",
                            "          \"networkDevice\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that contains this object\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to all equipment point mappings defined for this object\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this object for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms generated by this object\"",
                            "          },",
                            "          \"audits\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the audits generated for this object\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"objects\",",
                            "          \"networkDevice\",",
                            "          \"points\",",
                            "          \"attributes\",",
                            "          \"alarms\",",
                            "          \"audits\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of objects\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this object collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('objects_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('objects_id', id);",
                            "            tests['Set objects_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set objects_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Equipment Points Mapped To An Object",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id",
                                "points"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "shortName",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `category`,`equipmentName`, `isDisplayData`, `shortName`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                }
                            ]
                        },
                        "description": "Retrieves all equipment points mapped to attributes of this object.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"equipmentName\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the mapped equipment\"",
                            "          },",
                            "          \"shortName\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The short name for the equipment point\"",
                            "          },",
                            "          \"label\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The label for the equipment point\"",
                            "          },",
                            "          \"category\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The category for the equipment point\"",
                            "          },",
                            "          \"isDisplayData\": {",
                            "            \"type\": \"boolean\",",
                            "            \"description\": \"Whether the equipment point is marked as display data\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the mapped equipment\"",
                            "          },",
                            "          \"object\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the mapped object\"",
                            "          },",
                            "          \"attribute\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the mapped attribute\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"equipmentName\",",
                            "          \"shortName\",",
                            "          \"label\",",
                            "          \"category\",",
                            "          \"isDisplayData\",",
                            "          \"equipment\",",
                            "          \"object\",",
                            "          \"attribute\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment point mappings\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment point collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('objects_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('objects_id', id);",
                            "            tests['Set objects_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set objects_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'category', 'equipmentName', 'isDisplayData', 'shortName'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Object Attributes With Samples",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id",
                                "attributes"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of attributes under the specified object for which samples are available.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"samples\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this collection of object value samples\"",
                            "          },",
                            "          \"attribute\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attribute on which the samples were taken\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"samples\",",
                            "          \"attribute\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of available samples\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Samples For An Object Attribute",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id",
                                "attributes",
                                ":attributeId",
                                "samples"
                            ],
                            "query": [
                                {
                                    "key": "startTime",
                                    "value": "{{objects_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest sample to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{objects_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest sample to return"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "1000",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "timestamp",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `timestamp`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                },
                                {
                                    "key": "attributeId",
                                    "value": "{{objects_attributeId}}",
                                    "description": "The identifier of the attribute for which to retrieve sample information\n\n+ See /points/{id}/attributes for possible values"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of samples for the specified object attribute during a particular date and time range.\n\nNote that the parent endpoint `/objects/{id}/attributes/{attributeId}` is not currently implemented.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"attribute\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the attribute for which the samples were generated\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection of object value samples\"",
                            "    },",
                            "    \"object\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the object from which these samples were generated\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"attribute\",",
                            "    \"self\",",
                            "    \"object\",",
                            "    \"items\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('objects_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('objects_id', id);",
                            "            tests['Set objects_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set objects_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'timestamp'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Alarms For An Object",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id",
                                "alarms"
                            ],
                            "query": [
                                {
                                    "key": "startTime",
                                    "value": "{{objects_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest alarm to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{objects_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest alarm to return"
                                },
                                {
                                    "key": "priorityRange",
                                    "value": "{{objects_priorityRange}}",
                                    "description": "The inclusive priority range, from 0 to 255, of the alarm"
                                },
                                {
                                    "key": "type",
                                    "value": "{{objects_type}}",
                                    "description": "The type of the requested alarms\n\n+ See /enumSets/505/members for possible values."
                                },
                                {
                                    "key": "excludePending",
                                    "value": "false",
                                    "description": "The flag to exclude pending alarms"
                                },
                                {
                                    "key": "excludeAcknowledged",
                                    "value": "false",
                                    "description": "The flag to exclude acknowledged alarms"
                                },
                                {
                                    "key": "excludeDiscarded",
                                    "value": "false",
                                    "description": "The flag to exclude discarded alarms"
                                },
                                {
                                    "key": "attribute",
                                    "value": "{{objects_attribute}}",
                                    "description": "The attribute of the requested alarms\n\n+ See /enumSets/509/members for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `priority`, `creationTime`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of alarms for the specified object.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"description\": \"The collection of alarms\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this collection of object alarms\"",
                            "    },",
                            "    \"objectGenerating\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the object from which which this alarm was generated\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\",",
                            "    \"objectGenerating\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('objects_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('objects_id', id);",
                            "            tests['Set objects_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set objects_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'priority', 'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Audits For An Object",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "objects",
                                ":id",
                                "audits"
                            ],
                            "query": [
                                {
                                    "key": "originApplications",
                                    "value": "{{objects_originApplications}}",
                                    "description": "Filter by comma-separated list of origin applications\n\n+ See /enumSets/578/members for possible values"
                                },
                                {
                                    "key": "classLevels",
                                    "value": "{{objects_classLevels}}",
                                    "description": "Filter by comma-separated list of class levels\n\n+ See /enumSets/568/members for possible values"
                                },
                                {
                                    "key": "actionTypes",
                                    "value": "{{objects_actionTypes}}",
                                    "description": "Filter by comma-separated list of the action types\n\n+ See /enumSets/577/members for possible values"
                                },
                                {
                                    "key": "startTime",
                                    "value": "{{objects_startTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the earliest audit to return"
                                },
                                {
                                    "key": "endTime",
                                    "value": "{{objects_endTime}}",
                                    "description": "The ISO-8601 encoded dateTime representing the latest audit to return"
                                },
                                {
                                    "key": "excludeDiscarded",
                                    "value": "false",
                                    "description": "Determines whether discarded audits will be excluded from results. Default is `false` (discarded audits will not be excluded).\n\n+ Accepted Values: `true`,`false`"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "-creationTime",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `creationTime`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{objects_id}}",
                                    "description": "The identifier of the object"
                                }
                            ]
                        },
                        "description": "Retrieves a collection of audits for the specified object. When using multiple filters, an AND evaluation is assumed.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the audit\"",
                            "          },",
                            "          \"creationTime\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The ISO-8601 encoded dateTime representing the creation time when this audit message was created\"",
                            "          },",
                            "          \"actionType\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The action performed that initiated the audit. See /enumSets/577/members for possible values\"",
                            "          },",
                            "          \"discarded\": {",
                            "            \"type\": \"boolean\",",
                            "            \"description\": \"Indicates if the audit has been discarded\"",
                            "          },",
                            "          \"status\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"Enumeration representing status. See /enumSets/516/members for possible values\"",
                            "          },",
                            "          \"preData\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"value\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The past or present value of the audit\"",
                            "              },",
                            "              \"type\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "              },",
                            "              \"unit\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "              },",
                            "              \"precision\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "              }",
                            "            },",
                            "            \"description\": \"Data value prior to the Audit\",",
                            "            \"required\": [",
                            "              \"value\",",
                            "              \"type\",",
                            "              \"unit\",",
                            "              \"precision\"",
                            "            ]",
                            "          },",
                            "          \"postData\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"value\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The past or present value of the audit\"",
                            "              },",
                            "              \"type\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "              },",
                            "              \"unit\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "              },",
                            "              \"precision\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "              }",
                            "            },",
                            "            \"description\": \"Data value after the Audit\",",
                            "            \"required\": [",
                            "              \"value\",",
                            "              \"type\",",
                            "              \"unit\",",
                            "              \"precision\"",
                            "            ]",
                            "          },",
                            "          \"parameters\": {",
                            "            \"type\": \"array\",",
                            "            \"items\": {",
                            "              \"type\": \"object\",",
                            "              \"properties\": {",
                            "                \"value\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The past or present value of the audit\"",
                            "                },",
                            "                \"type\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The type of data value should be parsed into.  See /enumSets/501/members for possible values\"",
                            "                },",
                            "                \"unit\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The unit of measurement this data uses. See /enumSets/507/members for possible values\"",
                            "                },",
                            "                \"precision\": {",
                            "                  \"type\": \"string\",",
                            "                  \"description\": \"The precision, number of decimal places, this data uses. See /enumSets/0/members for possible values\"",
                            "                }",
                            "              },",
                            "              \"required\": [",
                            "                \"value\",",
                            "                \"type\",",
                            "                \"unit\",",
                            "                \"precision\"",
                            "              ]",
                            "            }",
                            "          },",
                            "          \"errorString\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The error that may have occurred during an audit\"",
                            "          },",
                            "          \"user\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The userName of the user that initiated the audit\"",
                            "          },",
                            "          \"signature\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"fullName\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The name of the person \\\"signing\\\"\"",
                            "              },",
                            "              \"reason\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The reason for signing\"",
                            "              }",
                            "            },",
                            "            \"description\": \"The user who created this audit\",",
                            "            \"required\": [",
                            "              \"fullName\",",
                            "              \"reason\"",
                            "            ]",
                            "          },",
                            "          \"object\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the object on which the activity was generated\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this audit\"",
                            "          },",
                            "          \"annotations\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"Link to annotations\"",
                            "          },",
                            "          \"legacy\": {",
                            "            \"type\": \"object\",",
                            "            \"properties\": {",
                            "              \"fullyQualifiedItemReference\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The fully qualified item reference of the object that created this audit\"",
                            "              },",
                            "              \"itemName\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"The short name of the object that created this audit\"",
                            "              },",
                            "              \"classLevel\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"Indicates the class level in which this audit belongs. See /enumSets/568/members for possible values\"",
                            "              },",
                            "              \"originApplication\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"Indicates the application that performed action that generated this audit. See /enumSets/578/members for possible values\"",
                            "              },",
                            "              \"description\": {",
                            "                \"type\": \"string\",",
                            "                \"description\": \"Provides the description of the action that generated this audit. See /enumSets/580/members for possible values\"",
                            "              }",
                            "            },",
                            "            \"description\": \"Metasys specific data\",",
                            "            \"required\": [",
                            "              \"fullyQualifiedItemReference\",",
                            "              \"itemName\",",
                            "              \"classLevel\",",
                            "              \"originApplication\",",
                            "              \"description\"",
                            "            ]",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"creationTime\",",
                            "          \"actionType\",",
                            "          \"discarded\",",
                            "          \"status\",",
                            "          \"preData\",",
                            "          \"postData\",",
                            "          \"parameters\",",
                            "          \"errorString\",",
                            "          \"user\",",
                            "          \"signature\",",
                            "          \"object\",",
                            "          \"self\",",
                            "          \"annotations\",",
                            "          \"legacy\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of audits\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this audit collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('objects_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('objects_id', id);",
                            "            tests['Set objects_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set objects_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'creationTime'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        },
        {
            "name": "Spaces",
            "description": "This section contains information about space-related resources as used within the Metasys API.",
            "item": [
                {
                    "name": "Get Spaces",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "spaces"
                            ],
                            "query": [
                                {
                                    "key": "type",
                                    "value": "{{spaces_type}}",
                                    "description": "Type of space to return\n\n+ See /enumSets/1766/members for possible values"
                                },
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                            ]
                        },
                        "description": "Retrieves a collection of spaces.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the space\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of space\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this space\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the space that contains this space\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces contained within this space\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances serving this space\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices serving this space\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"networkDevices\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of spaces\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this space collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('spaces_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('spaces_id', id);",
                            "            tests['Set spaces_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set spaces_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                ,
                {
                    "name": "Get A Single Space",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "spaces",
                                ":id"
                            ],
                            "query": [
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{spaces_id}}",
                                    "description": "The identifier of the space"
                                }
                            ]
                        },
                        "description": "Retrieves the specified space.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"id\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The identifier of the object\"",
                            "    },",
                            "    \"itemReference\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The fully qualified reference of the object\"",
                            "    },",
                            "    \"name\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"The name of the space\"",
                            "    },",
                            "    \"type\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the type of space\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this space\"",
                            "    },",
                            "    \"parent\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the space that contains this space\"",
                            "    },",
                            "    \"spaces\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the spaces contained within this space\"",
                            "    },",
                            "    \"equipment\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the equipment instances serving this space\"",
                            "    },",
                            "    \"networkDevices\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to the network devices serving this space\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"id\",",
                            "    \"itemReference\",",
                            "    \"name\",",
                            "    \"type\",",
                            "    \"self\",",
                            "    \"parent\",",
                            "    \"spaces\",",
                            "    \"equipment\",",
                            "    \"networkDevices\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Equipment Serving A Space",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "spaces",
                                ":id",
                                "equipment"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `type`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{spaces_id}}",
                                    "description": "The identifier of the space"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of equipment that serve the specified space.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The full name of the equipment instance\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the equipment definition for this equipment instance\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this equipment instance\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces served by this equipment instance\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment served by this equipment instance\"",
                            "          },",
                            "          \"upstreamEquipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment that serves this equipment instance\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that host this equipment instance\"",
                            "          },",
                            "          \"points\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the point mappings defined by this equipment instance\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"upstreamEquipment\",",
                            "          \"networkDevices\",",
                            "          \"points\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of equipment instances\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this equipment collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('spaces_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('spaces_id', id);",
                            "            tests['Set spaces_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set spaces_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'type'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Space Children",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "spaces",
                                ":id",
                                "spaces"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{spaces_id}}",
                                    "description": "The identifier of the space"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of spaces that are located within the specified space.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the space\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of space\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to this space\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the space that contains this space\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces contained within this space\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances serving this space\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices serving this space\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"spaces\",",
                            "          \"equipment\",",
                            "          \"networkDevices\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of spaces\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this space collection.\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('spaces_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('spaces_id', id);",
                            "            tests['Set spaces_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set spaces_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Network Devices Serving A Space",
                    "request": {
                        "url": {
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "spaces",
                                ":id",
                                "networkDevices"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "The page number of items to return"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "100",
                                    "description": "The maximum number of items to return in the response"
                                },
                                {
                                    "key": "sort",
                                    "value": "name",
                                    "description": "The criteria to use when sorting results (see [rules](#sorting-rules))\n\n+ Accepted Values: `categoryId`, `firmwareVersion`, `itemReference`, `name`, `typeId`"
                                }
                            ],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "{{spaces_id}}",
                                    "description": "The identifier of the space"
                                }
                            ]
                        },
                        "description": "Retrieves the collection of network devices that are serving the specified space.\nA space is considered to be served by a network device is considered to host an equipment if any equipment instance serving the space defines points that map to an attribute of any object contained on the network device.",
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/vnd.metasysapi.v1+json"
                            }
                        ]    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                            "var _ = require('lodash'),",
                            "    Url = require('postman-collection').Url;",
                            "",
                            "// Used to catch and show fatal errors in the test runner ",
                            "try {",
                            "    const isSuccess = responseCode.code === 200;",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    tests['Status code is correct'] = isSuccess;",
                            "",
                            "    pm.test('Content-Type header value is correct', function () {",
                            "        pm.expect(postman.getResponseHeader('Content-Type')).to.contain('application/vnd.metasysapi.v1+json');",
                            "    });",
                            "",
                            "    pm.test('Self link is correct', function () {",
                            "        const self = Url.parse(jsonData.self);",
                            "        const current = pm.request.url.toJSON();",
                            "",
                            "        const pathDiffs = _.difference(self.path, current.path);",
                            "        const queryDiffs = _.differenceWith(self.query, current.query, _.isEqual);",
                            "",
                            "        const pathDiffsDupe = pathDiffs.slice(0);",
                            "",
                            "        // Check if any of the differences are caused by the parent id being returned or version number in the url",
                            "        for (let diff of pathDiffsDupe) {",
                            "            if (jsonData.id === diff || pm.request.headers.get('Accept').indexOf(diff) !== -1) {",
                            "                pathDiffs.splice(pathDiffs.indexOf(diff), 1);",
                            "            }",
                            "        }",
                            "",
                            "        pm.expect(pathDiffs.length).to.equal(0, 'Differences found in the path:   (' + pathDiffs.join(', ') + ')   ');",
                            "        pm.expect(queryDiffs.length).to.equal(0, 'Differences found in the query:   (' + queryDiffs.join(', ') + ')   ');",
                            "    });",
                            "",
                            "    const schema = {",
                            "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
                            "  \"type\": \"object\",",
                            "  \"properties\": {",
                            "    \"total\": {",
                            "      \"type\": \"number\",",
                            "      \"description\": \"The total number of items in the collection\"",
                            "    },",
                            "    \"next\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the next page of results\"",
                            "    },",
                            "    \"previous\": {",
                            "      \"type\": [",
                            "        \"string\",",
                            "        \"null\"",
                            "      ],",
                            "      \"description\": \"A link to the previous page of results\"",
                            "    },",
                            "    \"items\": {",
                            "      \"type\": \"array\",",
                            "      \"items\": {",
                            "        \"type\": \"object\",",
                            "        \"properties\": {",
                            "          \"id\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The identifier of the object\"",
                            "          },",
                            "          \"itemReference\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The fully qualified reference of the object\"",
                            "          },",
                            "          \"name\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The name of the network device\"",
                            "          },",
                            "          \"type\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the type of network device\"",
                            "          },",
                            "          \"description\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The description for the network device\"",
                            "          },",
                            "          \"firmwareVersion\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The firmware version for the network device\"",
                            "          },",
                            "          \"category\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the authorization category for the network device\"",
                            "          },",
                            "          \"timeZone\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the time zone in which the device is located\"",
                            "          },",
                            "          \"self\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"The link to the network device\"",
                            "          },",
                            "          \"parent\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network device that is the parent of this network device\"",
                            "          },",
                            "          \"networkDevices\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the network devices that are children of this network device\"",
                            "          },",
                            "          \"equipment\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the equipment instances hosted by this network device\"",
                            "          },",
                            "          \"spaces\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the spaces that are served by this network device\"",
                            "          },",
                            "          \"objects\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the objects contained within this network device\"",
                            "          },",
                            "          \"attributes\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the attributes on this network device for which samples are available\"",
                            "          },",
                            "          \"alarms\": {",
                            "            \"type\": \"string\",",
                            "            \"description\": \"A link to the alarms available for this network device\"",
                            "          }",
                            "        },",
                            "        \"required\": [",
                            "          \"id\",",
                            "          \"itemReference\",",
                            "          \"name\",",
                            "          \"type\",",
                            "          \"description\",",
                            "          \"firmwareVersion\",",
                            "          \"category\",",
                            "          \"timeZone\",",
                            "          \"self\",",
                            "          \"parent\",",
                            "          \"networkDevices\",",
                            "          \"equipment\",",
                            "          \"spaces\",",
                            "          \"objects\",",
                            "          \"attributes\",",
                            "          \"alarms\"",
                            "        ]",
                            "      },",
                            "      \"description\": \"The collection of network devices\"",
                            "    },",
                            "    \"self\": {",
                            "      \"type\": \"string\",",
                            "      \"description\": \"A link to this network device collection\"",
                            "    }",
                            "  },",
                            "  \"required\": [",
                            "    \"total\",",
                            "    \"next\",",
                            "    \"previous\",",
                            "    \"items\",",
                            "    \"self\"",
                            "  ]",
                            "};",
                            "",
                            "    pm.test('JSON Schema is valid', function() {",
                            "        pm.expect(tv4.validate(jsonData, schema)).equal(true, tv4.error);",
                            "    });",
                            "",
                            "    if (!pm.environment.get('spaces_id')) {",
                            "        if (jsonData.items.length > 0 && jsonData.items[0].id) {",
                            "            const id = jsonData.items[0].id;",
                            "            pm.environment.set('spaces_id', id);",
                            "            tests['Set spaces_id to ' + id] = true;",
                            "        } else {",
                            "            tests['Failed to set spaces_id, could not find a matching item in the result set'] = false;",
                            "        }",
                            "    }",
                            "",
                            "    tests['Items should be returned'] = jsonData.items.length > 0;",
                            "",
                            "    const testRequests = [];",
                            "",
                            "    function runNextTest() { if (testRequests.length > 0) testRequests.pop()(() => runNextTest()); }",
                            "",
                            "    function testRequest(newParams, assertCallback) {",
                            "        testRequests.push((callback) => {",
                            "            const newUrl = _.cloneDeep(pm.request.url);",
                            "            newUrl.query.assimilate(newParams);",
                            "",
                            "            const newRequest = {",
                            "                url: newUrl.toString(),",
                            "                method: pm.request.method,",
                            "                header: pm.request.headers.toString()",
                            "            };",
                            "",
                            "            pm.sendRequest(newRequest, (err, res) => {",
                            "                assertCallback(err, res);",
                            "                callback();",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    if (isSuccess && pm.environment.get('include_sad_tests') === 'true') {",
                            "        const invalidPageError = '\"The specified pageSize is outside the valid range (1 - 1000)\"';",
                            "",
                            "        testRequest([{",
                            "            key: 'page',",
                            "            value: '-2'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page number should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body('\"The specified page must be greater than 0\"');",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '-4'",
                            "        }], (err, res) => {",
                            "            pm.test('Negative page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'pageSize',",
                            "            value: '10005'",
                            "        }], (err, res) => {",
                            "            pm.test('Large page size should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "                pm.expect(res).to.have.body(invalidPageError);",
                            "            });",
                            "        });",
                            "",
                            "        testRequest([{",
                            "            key: 'sort',",
                            "            value: 'invalidOne'",
                            "        }], (err, res) => {",
                            "            pm.test('Invalid sort parameter should return the correct error response', () => {",
                            "                pm.expect(err).to.equal(null);",
                            "                pm.expect(res).to.have.status(400);",
                            "",
                            "                const sortRegex = new RegExp(/^.*Valid attributes: (.*)$/gm);",
                            "                const actual = sortRegex.exec(res.json())[1].replace(/ /g, '').split(',');",
                            "                const difference = _.difference(actual, [",
                            "                    'categoryId', 'firmwareVersion', 'itemReference', 'name', 'typeId'",
                            "                ]);",
                            "",
                            "                pm.expect(difference.length).to.equal(0, 'Extraneous sort attributes found:    (' + difference.join(', ') + ')   ');",
                            "            });",
                            "        });",
                            "    }",
                            "",
                            "    runNextTest();",
                            "} catch (error) {",
                            "    tests['Fatal error running tests: ' + error] = false;",
                            "}",
                            ""
                        ]
                            }
                        }
                    ]
                }
                
            ]
        }
    ]
}